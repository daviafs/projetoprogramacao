PROJETO DE ALGORITMOS E LÓGICA DE PROGRAMAÇÃO 

Link Online: 
https://repl.it/NxTg/8

#include <stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

void menu1(void){
  
    int idioma = 0;
  
    printf("(1) English\n");
    printf("(2) Portuguese\n");
    printf("Select your language:");
}

void menuing(void){

    printf("\n");
    printf("MATRIX MANIPULATION PROGRAM\n");
    printf("(1) Size of matrix A\n");
    printf("(2) Size of matrix B\n");
    printf("(3) Fill matrix A with random numbers\n");
    printf("(4) Fill matrix B with random numbers\n");
    printf("(5) Assign a value to an element of A\n");
    printf("(6) Assign a value to an element of B\n");
    printf("(7) Add the matrices (C=A+B)\n");
    printf("(8) Subtract the matrices (C=A-B)\n");
    printf("(9) Multiply the matrices (C=A*B)\n");
    printf("(10) Show matrix A\n");
    printf("(11) Show matrix B\n");
    printf("(12) Show matrix C\n");
    printf("(13) Read matrix A from a file\n");
    printf("(14) Read matrix B from a file\n");
    printf("(15) Write matrix C in a file\n");
    printf("(16) Change language\n");
    printf("(17) Exit\n");

    printf("Choose an option:");
}

void menuport(void){
    
    printf("\n");
    printf("PROGRAMA DE MANIPULAÇÃO DE MATRIZES\n");
    printf("(1) Tamanho da matriz A\n");
    printf("(2) Tamanho da matriz B\n");
    printf("(3) Preencher matriz A com valores aleatorios\n");
    printf("(4) Preencher matriz B com valores aleatorios\n");
    printf("(5) Atribuir valor para um elemento de A\n");
    printf("(6) Atribuir valor para um elemento de B\n");
    printf("(7) Soma das matrizes (C=A+B)\n");
    printf("(8) Subtracao das matrizes (C=A-B)\n");
    printf("(9) Multiplicacao das matrizes (C=A*B)\n");
    printf("(10) Mostrar matriz A\n");
    printf("(11) Mostrar matriz B\n");
    printf("(12) Mostrar matriz C\n");
    printf("(13) Ler a matriz A de um arquivo\n");
    printf("(14) Ler a matriz B de um arquivo\n");
    printf("(15) Escrever a matriz C em um arquivo\n");
    printf("(16) Mudar de idioma\n");
    printf("(17) Sair\n");

    printf("Digite a opcao:");
}

struct sizematrix{
  int numberlines;
  int numbercolumns;
}M;
struct sizematrix size(){
  struct sizematrix M;
           //Fill the number of lines and columns;
  printf("How many lines do you want in your matrix? ");
  scanf("%d",&M.numberlines);
  printf("How many columns do you want in your matrix? ");
  scanf("%d",&M.numbercolumns);
  
    return M;
}

void Rand(void){
  srand((unsigned int)time(NULL));
  rand();
  rand();
  rand();
  
}

void fill(float matrix[20][20], int lines, int columns){
 int num=0;
 int num1=0;
 int number=0;
 
         //Para gerar numeros aleotorios flutuantes será preciso usar a função variavel=(float)(rand())/(float)(RAND_MAX)*100.0
         
         printf("\n==========Your matrix A is just below=========\n\n");
         if(number==0){
           Rand();
         }else{
           srand(time(NULL));
         }
  for(num=0;num<=lines-1;num++){
     for(num1=0;num1<=columns-1;num1++){
         number++;
         
         matrix[num][num1]=(float)(rand())/(float)(RAND_MAX)*100.0;
         if(num1==0){
           printf("                   ");
         }
         if(matrix[num][num1]<10){
         printf("%.2f ",matrix[num][num1]);
         }else{
           printf("%f ",matrix[num][num1]);
         }
          

     }
      printf("\n");
 }


 number++;
}

void filL(float matrix[20][20], int lines, int columns){
 int num=0;
 int num1=0;
 int number=0;
 
         //Para gerar numeros aleotorios flutuantes será preciso usar a função variavel=(float)(rand())/(float)(RAND_MAX)*100.0
   
         
         printf("\n==========Your matrix B is just below=========\n\n");
         if(number==0){
           Rand();
         }else{
           srand(time(NULL));
         }
  for(num=0;num<=lines-1;num++){
     for(num1=0;num1<=columns-1;num1++){
         number++;
         
         matrix[num][num1]=(float)(rand())/(float)(RAND_MAX)*100.0;
         if(num1==0){
           printf("                   ");
         }
         if(matrix[num][num1]<10){
         printf("%.2f ",matrix[num][num1]);
         }else{
           printf("%f ",matrix[num][num1]);
         }
          

     }
      printf("\n");
 }
}

void assign(float matrix[20][20], int iA, int jA){
    int num=0;
    int num1=0;
            
    for(num=0;num<iA;num++){
        for(num1=0;num1<jA;num1++){
            printf("\nType the valor of the place [%d][%d]: ",num+1,num1+1);
            scanf("%f",&matrix[num][num1]);
        }
    }
    
   }


void sum(float matrixA[20][20], float matrixB[20][20], float matrixC[20][20], int linhA,int colunA,int linhB,int colunB,int linhC,int colunC){
  int num,num1;
  linhC=linhA;  // !!!!!!!!!!!!
  colunC=colunA;  // !!!!!!!!!!!!
  if((linhA==linhB)&&(colunA==colunB)){
    for(num=0;num<=linhC-1;num++){
      for(num1=0;num1<=colunC-1;num1++){
        matrixC[num][num1]=matrixA[num][num1]+matrixB[num][num1];
        printf(" %f",matrixC[num][num1]);
      }
      printf("\n");
    }
  }else{
    printf("\nYou can't make the sum because the size of your arrays different\n");
  }
   
}

float sub(float matrixA[20][20], float matrixB[20][20], float matrixC[20][20], int linhA,int colunA,int linhB,int colunB,int linhC,int colunC){
  int num,num1;
  linhC=linhA;   // !!!!!!!!!!!!
  colunC=colunA;  // !!!!!!!!!!!!
  if((linhA==linhB)&&(colunA==colunB)){
    for(num=0;num<=linhC-1;num++){
      for(num1=0;num1<=colunC-1;num1++){
        matrixC[num][num1]=matrixA[num][num1]-matrixB[num][num1];
        printf(" %f",matrixC[num][num1]);
      }
      printf("\n");
    }
  }else{
    printf("\nYou can't make the subtraction because the size of your arrays different\n");
  }
   
}

void mult(float matrixA[20][20], float matrixB[20][20], int matrixC[20][20], int linhA,int colunA,int linhB,int colunB,int linhC,int colunC){
printf("oi");
  int i,j, X, num=0, sum=0;

  if(colunA==linhB){
    linhC=linhA;
    colunC=colunB;
   printf("oi");
    for(i=0; i<linhC; i++)
{ printf("oi");
        for(j=0; j<colunC; j++)
        {printf("oi");
                 
                 for(X=0; X<linhA; X++)
                 {
                 sum = (matrixA[i][X] * matrixB[X][j]) +sum;
                 printf("%f",sum);
                 }
                 matrixC[i][j]=sum;
                printf("%f",matrixC[i][j]);
                 sum=0;
                 printf("%f ",matrixC[i][j]);
                 }
                 printf("\n");
                 }

  }else{
printf("VSF")    ;
  }
}

void show( float matrix[20][20],int linha,int coluna){
  int i,j;
  
  for(i=0;i<=linha-1;i++){
    for(j=0;j<=coluna-1;j++){
      printf("%f ",matrix[i][j]);
    }
    printf("\n");
  }
}

int main(){
  
  struct sizematrix B;
  struct sizematrix A;
  float matrixA[20][20], matrixB[20][20], matrixC[20][20];
  float i, j;
  int liinhC,coolunC;
  int opcao, idioma;
  
  opcao = 0;
    
  menu1();
  scanf("%d", &idioma);
    
  do{
      if(idioma == 2){
        menuport();
      }else{
        menuing();
      }
      scanf("%d", &opcao);
      switch (opcao){
          
      // O usuário determina o número de linhas e colunas da matriz A
      case 1:   
          A=size();
          break;
        
      // O usuário determina o número de linhas e colunas da matriz B
        case 2:
          B=size();
          break;
            
      // A matriz A será preenchida com valores aleatórios
      case 3:
          fill(matrixA, A.numberlines,A.numberlines);
          break;
            
      // A matriz B será preenchida com valores aleatórios
      case 4:
          filL(matrixB, B.numberlines,B.numberlines);
          break;
        
      // O usuário irá selecionar a linha e coluna de um elemento de A para atribuir um valor
      case 5:
          assign(matrixA, A.numberlines, A.numberlines);
          break;
        
      // O usuário irá selecionar a linha e coluna de um elemento de B para atribuir um valor
      case 6:
          assign(matrixB, B.numberlines, B.numberlines);
          break;
        
      // Realiza a soma da matriz A com B e o resultado será guardado na matriz C
      case 7:
          sum(matrixA, matrixB, matrixC, A.numberlines, A.numbercolumns, B.numberlines, B.numbercolumns, liinhC, coolunC);
          break;
        
      // Realiza a subtraçõa da matriz A com B e o resultado será guardado na matriz C
      case 8:
          sub(matrixA, matrixB, matrixC, A.numberlines, A.numbercolumns, B.numberlines, B.numbercolumns, liinhC, coolunC);
          break;
        
      // Realiza a multiplicacao da matriz A com B e o resultado será guardado na matriz C
      case 9:
          
          break;
        
      // Mostra a matriz A
      case 10:
          show(matrixA, A.numberlines, A.numbercolumns);
          break;
        
      // Mostra a matriz B
      case 11:
          show(matrixB, B.numberlines, B.numbercolumns);
          break;
        
      // Mostra a matriz C;
      case 12:
          show(matrixC, liinhC, coolunC); // !!!!!!!!!!!!
          break;
            
      // Importa e lê a matriz A de um arquivo do tipo ".txt"    
      case 13:
      
          break;
            
      // Importa e lê a matriz B de um arquivo do tipo ".txt"  
      case 14:
      
          break;    
        
      // Exporta e escreve a matriz C em um arquivo do tipo ".txt"    
      case 15:
          //showC();
          break;
        
      // Abre o menu para mudar o idioma do programa
      case 16:
          menu1();
          scanf("%d", &idioma);
          break;
        
      // Quando o usuário sair do do programa
      case 17:
          if(idioma == 2){
              printf("PROGRAMA ENCERRADO!\n");
          }else{
              printf("END OF THE PROGRAM!\n");
          }
          break;
            
      // Quando o usuário digitar uma opcão que não consta no menu
      default:
          if(idioma == 2){
              printf("Escolha uma opcao disponivel!\n");
          }else{
              printf("Choose an available option!\n");
          }
      }

  } while (opcao != 17);
  

  return 0;
  
}